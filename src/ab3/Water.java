package ab3;

import java.util.ArrayList;

public class Water extends Object3d {

    public Water(String texture) {
        this.vertices = drawVertices();
        this.normals = drawNormals();
        this.colors = setColors();
        this.uvCoords = drawUvCoords();
        setTexture(texture);
        setModelMatrix();
    }

    private float[] drawVertices() {
        float[] vertices = new float[] {
            // hintere reihe
            -3,0.5f,-3,
            -3,0,-1,
            -1,0,-3,

            -1,0,-3,
            -3,0,-1,
            -1,0.5f,-1,

            -1,0,-3,
            -1,0.5f,-1,
            1,0.5f,-3,

            1,0.5f,-3,
            -1,0.5f,-1,
            1,0,-1,

            1,0.5f,-3,
            1,0,-1,
            3,0,-3,

            3,0,-3,
            1,0,-1,
            3,0.5f,-1,

            // mittlere reihe
            -3,0,-1,
            -3,0.5f,1,
            -1,0.5f,-1,

            -1,0.5f,-1,
            -3,0.5f,1,
            -1,0,1,

            -1,0.5f,-1,
            -1,0,1,
            1,0,-1,

            1,0,-1,
            -1,0,1,
            1,0.5f,1,

            1,0,-1,
            1,0.5f,1,
            3,0.5f,-1,

            3,0.5f,-1,
            1,0.5f,1,
            3,0,1,

            // vordere reihe
            -3,0.5f,1,
            -3,0,3,
            -1,0,1,

            -1,0,1,
            -3,0,3,
            -1,0.5f,3,

            -1,0,1,
            -1,0.5f,3,
            1,0.5f,1,

            1,0.5f,1,
            -1,0.5f,3,
            1,0,3,

            1,0.5f,1,
            1,0,3,
            3,0,1,

            3,0,1,
            1,0,3,
            3,0.5f,3,
        };
        return vertices;
    }

    private float[] drawNormals() {
        float[] normals = new float[] {
                // hintere
                1,1,1,
                1,1,1,
                1,1,1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                1,1,1,
                1,1,1,
                1,1,1,

                1,1,1,
                1,1,1,
                1,1,1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                // mittlere
                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                1,1,1,
                1,1,1,
                1,1,1,

                1,1,1,
                1,1,1,
                1,1,1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                1,1,1,
                1,1,1,
                1,1,1,

                // vordere
                1,1,1,
                1,1,1,
                1,1,1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,

                1,1,1,
                1,1,1,
                1,1,1,

                1,1,1,
                1,1,1,
                1,1,1,

                -1,1,-1,
                -1,1,-1,
                -1,1,-1,
        };
        return normals;
    }
    private float[] setColors() {
        float[] colors = new float[] {
                //hintere
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                //mittlere
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                //vordere
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,

                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
                0.5f,0.5f,0.5f,
        };
        return colors;
    }

    private float[] drawUvCoords() {
        float[] uvCoords = new float[] {
                //hintere
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                //mittlere
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                //vordere
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,

                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
                0,0, 0,1, 1,0,
        };
        return uvCoords;
    }
}
